/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// recursive way to solve validation 
class Solution {    
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MAX_VALUE, Long.MIN_VALUE);
    }
    
    private boolean isValidBST(TreeNode t, long max, long min) {
        if(t == null) return true;
        if(t.val >= max || t.val <= min) return false;
        return isValidBST(t.left, t.val, min) && isValidBST(t.right, max, t.val);
        
    }
}

// use the bst inorder traversal template to solve this validation problem.
class Solution {    
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        Deque<TreeNode> stack = new LinkedList<>();
        TreeNode pre = null;
        while(!stack.isEmpty() || root!= null) {
            while(root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if(pre != null && root.val <= pre.val) return false;            
            pre = root;
            root = root.right;           
        }        
        return true;
    }
}
