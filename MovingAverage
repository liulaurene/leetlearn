class MovingAverage {
    Queue<Integer> q = new LinkedList();
    int sum;
    int size;

    /** Initialize your data structure here. */
    public MovingAverage(int size) {
        this.size = size;
    }
    
    public double next(int val) {
        if(q.size() == size)
            sum -= q.poll();        // if you don't minus the element deleted from queue, you got wrong answer
        q.offer(val);
        sum += val;        
        return sum * 1.0 / q.size();
    }
}

/**
 * use built-in Queue library 
 * Inser the specified element into this queue: add(e)	offer(e)
 * Remove and return the head of the queue:	remove()	poll()
 * Return, but do not remove, the head of the queue: element()	peek()
 * difference is add/remove/element will throw exception if unsuccessful, offer/poll/peek will return specified value
 */
 

