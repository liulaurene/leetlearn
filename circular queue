class MyCircularQueue {
    
    private int head;
    private int tail;
    private int[] queue;
    private int currentsize;
    private int size;
    

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        size = k;
        head = 0;                     // initial value of head and tail
        tail = -1;
        currentsize = 0;
        queue = new int[size];
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(isFull() == true)
            return false;
        else
        {
            tail = (++tail) % size;   // ++tail and tail++
            queue[tail] = value;
            currentsize++;
            return true;
        }       
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(isEmpty() == true)
            return false;
        else
        {
            head = (++head) % size;   // use % to implement circular
            currentsize--;
            return true;
        }
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(currentsize != 0)
            return queue[head];
        return -1;
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
        if(currentsize != 0)
            return queue[tail];
        return -1;
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return currentsize == 0;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return currentsize == size;
    }
}
